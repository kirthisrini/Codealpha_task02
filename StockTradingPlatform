import java.util.Scanner;
import java.util.HashMap;
import java.util.Map;
class Stock {
    private String symbol;
    private String name;
    private double price;

    public Stock(String symbol, String name, double price) {
        this.symbol = symbol;
        this.name = name;
        this.price = price;
    }

    public String getSymbol() {
        return symbol;
    }

    public String getName() {
        return name;
    }

    public double getPrice() {
        return price;
    }

    public void setPrice(double price) {
        this.price = price;
    }
}

class StockMarket {
    private Map<String, Stock> stocks;

    public StockMarket() {
        stocks = new HashMap<>();
        stocks.put("AAPL", new Stock("AAPL", "Apple Inc.", 175.0));
        stocks.put("GOOGL", new Stock("GOOGL", "Alphabet Inc.", 2800.0));
        stocks.put("MSFT", new Stock("MSFT", "Microsoft Corp.", 300.0));
    }

    public void viewMarketData() {
        System.out.println("\nMarket Data:");
        for (Stock stock : stocks.values()) {
            System.out.printf("%s (%s) - $%.2f%n", stock.getSymbol(), stock.getName(), stock.getPrice());
        }
    }

    public Stock getStock(String symbol) {
        return stocks.get(symbol);
    }
}
class Portfolio {
    private Map<String, Integer> holdings;
    private double cash;

    public Portfolio() {
        holdings = new HashMap<>();
        cash = 10000.0; // Starting cash
    }

    public void buyStock(StockMarket market, Scanner scanner) {
        System.out.print("Enter stock symbol to buy: ");
        String symbol = scanner.nextLine().toUpperCase();
        Stock stock = market.getStock(symbol);

        if (stock == null) {
            System.out.println("Stock not found.");
            return;
        }

        System.out.print("Enter quantity to buy: ");
        int quantity = Integer.parseInt(scanner.nextLine());

        double cost = stock.getPrice() * quantity;
        if (cost > cash) {
            System.out.println("Insufficient funds.");
            return;
        }

        cash -= cost;
        holdings.put(symbol, holdings.getOrDefault(symbol, 0) + quantity);
        System.out.printf("Bought %d shares of %s for $%.2f%n", quantity, symbol, cost);
    }

    public void sellStock(StockMarket market, Scanner scanner) {
        System.out.print("Enter stock symbol to sell: ");
        String symbol = scanner.nextLine().toUpperCase();
        Stock stock = market.getStock(symbol);

        if (stock == null) {
            System.out.println("Stock not found.");
            return;
        }

        if (!holdings.containsKey(symbol) || holdings.get(symbol) == 0) {
            System.out.println("No shares to sell.");
            return;
        }

        System.out.print("Enter quantity to sell: ");
        int quantity = Integer.parseInt(scanner.nextLine());

        if (quantity > holdings.get(symbol)) {
            System.out.println("Insufficient shares.");
            return;
        }

        double revenue = stock.getPrice() * quantity;
        cash += revenue;
        holdings.put(symbol, holdings.get(symbol) - quantity);
        System.out.printf("Sold %d shares of %s for $%.2f%n", quantity, symbol, revenue);
    }

    public void viewPortfolio() {
        System.out.println("\nPortfolio:");
        System.out.printf("Cash: $%.2f%n", cash);

        if (holdings.isEmpty()) {
            System.out.println("No stocks in portfolio.");
            return;
        }

        for (Map.Entry<String, Integer> entry : holdings.entrySet()) {
            String symbol = entry.getKey();
            int quantity = entry.getValue();
            System.out.printf("%s: %d shares%n", symbol, quantity);
        }
    }
}
public class SimpleStockTradingPlatform{
    public static void main(String[] args) {
        StockMarket market = new StockMarket();
        Portfolio portfolio = new Portfolio();

        Scanner scanner = new Scanner(System.in);
        String command;

        while (true) {
            System.out.println("\nStock Trading Platform");
            System.out.println("1. View Market Data");
            System.out.println("2. Buy Stock");
            System.out.println("3. Sell Stock");
            System.out.println("4. View Portfolio");
            System.out.println("5. Exit");
            System.out.print("Enter a command: ");
            command = scanner.nextLine();

            switch (command) {
                case "1":
                    market.viewMarketData();
                    break;
                case "2":
                    portfolio.buyStock(market, scanner);
                    break;
                case "3":
                    portfolio.sellStock(market, scanner);
                    break;
                case "4":
                    portfolio.viewPortfolio();
                    break;
                case "5":
                    System.out.println("Exiting...");
                    return;
                default:
                    System.out.println("Invalid command. Please try again.");
            }
        }
    }
}
